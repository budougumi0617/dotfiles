" jjをESCキー
inoremap <silent> jj <esc>
" CTRL-jをESCキー
inoremap <silent> <C-j> <esc>

" 検索設定
" 検索するときに大文字小文字を区別しない
set ignorecase
" 小文字で検索すると大文字と小文字を無視して検索
set smartcase
" 検索がファイル末尾まで進んだら、ファイル先頭から再び検索
set wrapscan
" インクリメンタル検索 (検索ワードの最初の文字を入力した時点で検索が開始)
set incsearch
" 検索結果をハイライト表示
set hlsearch


" ウィンドウの幅より長い行は折り返され、次の行に続けて表示される
set wrap

" macOSのクリップボードにコピーする
set clipboard+=unnamed

" "\"から<leader>を変更
let mapleader = "\<Space>"

" マウスホバーしたときの情報を表示する
" ref: https://zenn.dev/sdb_blog/articles/003-idea_with_vim
nmap <leader>k <Action>(ShowHoverInfo)

" インタフェースの実装に移動する
nmap gi <Action>(GotoImplementation)

" ファイル内のエラー箇所にジャンプする
nmap [e <Action>(GotoPreviousError)
nmap ]e <Action>(GotoNextError)

" ファイル内の変更箇所にジャンプする
nmap [c <Action>(VcsShowPrevChangeMarker)
nmap ]c <Action>(VcsShowNextChangeMarker)


" map like LSP
nmap gd <Action>(GotoDeclaration)
nmap gr <Action>(FindUsages)
nmap gI <Action>(GotoImplementation)
nmap gD <Action>(GotoDeclarationOnly)
nmap gy <Action>(GotoTypeDeclaration)
nmap K <Action>(ShowHoverInfo)
nmap <leader>cr <Action>(RenameElement)
" GoLandではテストの再実行がRerunTestsではなく、Rerunのようだ
" map <leader>r <Action>(Rerun)
nmap <leader>r <Action>(RunClass)

let g:WhichKeyDesc_GotoDefinition      = "gd Goto Definition"
let g:WhichKeyDesc_FindUsages          = "gr Find Usages"
let g:WhichKeyDesc_GotoImplementaion   = "gI Goto Implementation"
let g:WhichKeyDesc_GotoDeclationOnly   = "gD Goto Declaration"
let g:WhichKeyDesc_GotoTypeDeclaration = "gD Goto Declaration"
let g:WhichKeyDesc_Hover               = "K  Hover"
let g:WhichKeyDesc_RunClass            = "<leader>r RunClass(Run Test)"
let g:WhichKeyDesc_Rename              = "<leader>cr Rename"



set which-key

set notimeout

" リロードコマンド
" :action IdeaVim.ReloadVimRc.reload
